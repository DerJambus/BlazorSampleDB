

<div class="modal fade show d-block" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Add ToDo</h4>
                <button class="close"
                        type="button"
                        data-dismiss="modal"
                        aria-label="Close"
                        @onclick="Close">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="@todo" OnValidSubmit="HandleValidSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group">
                        <label for="title">
                            Title:
                        </label>
                        <input id="title" @bind-value="todo.Title" class="form-control" />
                        <ValidationMessage For="@(()=>todo.Title)" />
                    </div>
                    <div class="form-group">
                        <label for="description">
                            Description:
                        </label>
                        <input id="description" @bind-value="todo.Description" class="form-control" />
                        <ValidationMessage For="@(()=>todo.Description)" />
                    </div>
                    <div class="form-group">
                        <label for="deadline">
                            Deadline:
                        </label>
                        <input id="deadline" @bind-value="todo.Deadline" type="date" class="form-control" />
                        <ValidationMessage For="@(()=>todo.Deadline)" />
                    </div>
                     <button class="btn btn-success" type="submit">Save</button>
                    <button class="btn btn-danger" @onclick="Close">Cancel</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>


@code {
    @using BlazorSampleDB.Shared;
    [Inject]
    HttpClient http { get; set; }

    [Parameter]
    public bool add { get; set; }

    [Parameter]
    public EventCallback<bool> addChanged { get; set; }

    [Parameter]
    public EventCallback<ToDo> todoChanged { get; set; }

    private ToDo todo = new ToDo();

    protected async Task HandleValidSubmit()
    {
        var result = await http.PostAsJsonAsync("ToDo/Add", todo);
        todo = await result.Content.ReadFromJsonAsync<ToDo>();
        await todoChanged.InvokeAsync(todo);
        await Close();
        return;
    }

    protected async Task Close()
    {
        add = false;
        await addChanged.InvokeAsync(add);
        return;
    }
}
